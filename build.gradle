/*
 * Copyright RestClientGenerator
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'idea'
    id 'java'
    id 'jacoco'
    id 'project-report'
    id 'org.sonarqube' version '3.0'
    id 'org.springframework.boot' version '2.3.2.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.10.RELEASE' apply false
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'project-report'
    group "io.raphasil.${rootProject.name}"
    version '1.0-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_14

    java {
        registerFeature('provided') {
            usingSourceSet(sourceSets.main)
        }
    }

    test {
        reports.html.enabled = false
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    dependencies {

        constraints {

            // spring
            implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: spring_boot_version
            implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: spring_boot_version
            implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: spring_boot_version
            annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-autoconfigure-processor', version: spring_boot_version
            annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: spring_boot_version

            // lombok
            compileOnly group: 'org.projectlombok', name: 'lombok', version: lombok_version
            annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok_version

            // javaPoet
            implementation group: 'com.squareup', name: 'javapoet', version: javapoet_version

            // Google Auto
            compileOnly group: 'com.google.auto.service', name: 'auto-service', version: google_auto_service_version
            implementation group: 'com.google.auto', name: 'auto-common', version: google_auto_common_version

            // Logback
            implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
            implementation group: 'ch.qos.logback', name: 'logback-core', version: logback_version
            implementation group: 'ch.qos.logback', name: 'logback-classic', version: logback_version

            // Apache Commons
            implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'

            //// TEST
            testImplementation group: 'com.google.testing.compile', name: 'compile-testing', version: google_compile_testing_version
            testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit_jupter_version
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

sonarqube {
    properties {
        property "sonar.projectKey", "raphasil_rest-client-generator"
        property "sonar.organization", "raphasil"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    }
}


